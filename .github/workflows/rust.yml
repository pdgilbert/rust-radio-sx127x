name: Rust

on:
  push:
    branches: [ all-devices-examples, master]
    tags: [ 'v*' ]
  pull_request:
    branches: [ all-devices-examples ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-util:

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            output: sx127x-util
            use_cross: false
            experimental: false
            args: --features util,driver-pal/hal-cp2130,driver-pal/hal-linux

    steps:
    - uses: actions/checkout@v2
    - uses: FranzDiebold/github-env-vars-action@v1.2.1
      
    - name: Configure toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        target:  ${{ matrix.target }}
        override: true
    
    - name: Configure caching 
      uses: actions/cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.target }}
        path: |
          ${{ env.HOME }}/.cargo"
          target

    - name: Install libusb (brew)
      if: ${{ matrix.os == 'macos-latest' }}
      run: brew install libusb
    
    - name: Install libusb (apt native)
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu' }}
      run: sudo apt install -y libusb-dev

    - name: Install libusb (apt armv7)
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.target == 'armv7-unknown-linux-gnueabihf' }}
      run: |
        sudo dpkg --add-architecture armhf
        sudo apt update
        sudo apt install libusb-dev:armhf

    - name: Install libusb (vcpkg)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        vcpkg integrate install
        vcpkg install libusb:x64-windows-static
        echo "LIBUSB_DIR=C:/vcpkg/installed/x64-windows-static/" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

    - name: Cache vcpkg
      if: ${{ matrix.os == 'windows-latest' }}
      uses: actions/cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.target }}
        path: $VCPKG_DIRECTORY
      
    # probably want next 4 name sections on master, but not on forks and branches
    - name: Build release
      uses: actions-rs/cargo@v1
      with:
        use-cross: ${{ matrix.use_cross }}
        command: build
        args: --target ${{ matrix.target }} --release ${{ matrix.args }}

    - name: Copy / Rename utility
      run: |
        cp target/${{ matrix.target }}/release/${{ matrix.output }} ${{ matrix.output }}-${{ matrix.target }}
        tar -cvf sx127x-util-${{ matrix.target }}.tgz ${{ matrix.output }}-${{ matrix.target }}

    - name: Upload utility artifacts
      uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.output }}-${{ matrix.target }}
        path: ${{ matrix.output }}-${{ matrix.target }}

    - name: Upload utility binary to release
      if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: sx127x-util-${{ matrix.target }}.tgz
        asset_name: sx127x-util-${{ matrix.target }}.tgz
        tag: ${{ github.ref }}
        overwrite: true

  test_examples:
    name: Test examples
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        mcu: [stm32f042, stm32f030xc, stm32f103, stm32f100, stm32f101, stm32f303xc,
              stm32f401, stm32f411,   stm32h742, stm32l0x2, stm32l100, stm32l151, stm32l4x2, ]
        include:
           - mcu:  stm32f042
             hal: "stm32f0xx"
             trg: "thumbv6m-none-eabi"
           - mcu:  stm32f030xc
             hal: "stm32f0xx"
             trg: "thumbv6m-none-eabi"   
           - mcu:  stm32f100
             hal: "stm32f1xx"
             trg: "thumbv7m-none-eabi"
           - mcu:  stm32f101
             hal: "stm32f1xx"
             trg: "thumbv7m-none-eabi"
           - mcu:  stm32f103
             hal: "stm32f1xx"
             trg: "thumbv7m-none-eabi"
           - mcu:  stm32f303xc
             hal: "stm32f3xx"
             trg: "thumbv7em-none-eabihf"
           - mcu:  stm32f401
             hal: "stm32f4xx"
             trg: "thumbv7em-none-eabihf"
           - mcu:  stm32f411
             hal: "stm32f4xx"
             trg: "thumbv7em-none-eabihf"
           - mcu:  stm32h742		 
             hal: "stm32h7xx"
             trg: "thumbv7em-none-eabihf"
           - mcu:  stm32l0x2
             hal: "stm32l0xx"
             trg: "thumbv6m-none-eabi"
           - mcu:  stm32l100
             hal: "stm32l1xx"
             trg: "thumbv7m-none-eabi"
           - mcu:  stm32l151
             hal: "stm32l1xx"
             trg: "thumbv7m-none-eabi"
           - mcu:  stm32l4x2
             hal: "stm32l4xx"
             trg: "thumbv7em-none-eabi"
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      #- name: Build
      #  uses: actions-rs/cargo@v1
      #  with:
      #    command: build
      #    args:  --no-default-features --release --target ${{ matrix.trg }} --features ${{ matrix.mcu }},compat
      - name: Build example lora_spi_send
        uses: actions-rs/cargo@v1
        with:
          command: build
          args:  --no-default-features --release --target ${{ matrix.trg }} --features ${{ matrix.hal }},${{ matrix.mcu }},compat --example lora_spi_send
          use-cross: true
      - name: Build example lora_spi_receive
        uses: actions-rs/cargo@v1
        with:
          command: build
          args:  --no-default-features --release --target ${{ matrix.trg }} --features ${{ matrix.hal }},${{ matrix.mcu }},compat --example lora_spi_receive
          use-cross: true
      - name: Build example lora_spi_gps
        uses: actions-rs/cargo@v1
        with:
          command: build
          args:  --no-default-features --release --target ${{ matrix.trg }} --features ${{ matrix.hal }},${{ matrix.mcu }},compat --example lora_spi_gps
          use-cross: true


